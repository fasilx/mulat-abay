<?xml version='1.0' encoding='UTF-8'?>
<glyph name="six.frac0" format="2">
  <advance width="751"/>
  <note>
glyph00546
</note>
  <outline>
    <contour>
      <point x="392" y="-11" type="curve" smooth="yes"/>
      <point x="568" y="-11"/>
      <point x="683" y="104.333"/>
      <point x="683" y="259" type="curve" smooth="yes"/>
      <point x="683" y="417.667"/>
      <point x="587.333" y="523"/>
      <point x="430" y="523" type="curve" smooth="yes"/>
      <point x="354" y="523"/>
      <point x="292" y="497.333"/>
      <point x="244" y="446" type="curve"/>
      <point x="259.333" y="592"/>
      <point x="356.333" y="665.667"/>
      <point x="552" y="667" type="curve"/>
      <point x="552" y="798" type="line"/>
      <point x="239.667" y="791.333"/>
      <point x="86" y="634.333"/>
      <point x="86" y="357" type="curve" smooth="yes"/>
      <point x="86" y="306" type="line" smooth="yes"/>
      <point x="86" y="104.667"/>
      <point x="206.667" y="-11"/>
    </contour>
    <contour>
      <point x="388" y="117" type="curve" smooth="yes"/>
      <point x="304" y="117"/>
      <point x="242" y="174"/>
      <point x="242" y="286" type="curve" smooth="yes"/>
      <point x="242" y="320" type="line"/>
      <point x="264.667" y="362.667"/>
      <point x="319" y="396"/>
      <point x="387" y="396" type="curve" smooth="yes"/>
      <point x="479" y="396"/>
      <point x="527" y="340.667"/>
      <point x="527" y="258" type="curve" smooth="yes"/>
      <point x="527" y="175.333"/>
      <point x="469.333" y="117"/>
    </contour>
  </outline>
  <lib>
    <dict>
      <key>assembly</key>
      <string>SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
0 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0 
MDAP[1]	/* MoveDirectAbsPt */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
0 24 
MIAP[0]	/* MoveIndirectAbsPt */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
12 
MDAP[1]	/* MoveDirectAbsPt */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
12 18 
MIAP[0]	/* MoveIndirectAbsPt */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0 
SRP0[ ]	/* SetRefPoint0 */
PUSHB[ ]	/* 2 values pushed */
1 2 
PUSHB[ ]	/* 1 value pushed */
10 
CALL[ ]	/* CallFunction */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
MDRP[11000]	/* MoveDirectRelPt */
ELSE[ ]	/* Else */
MIRP[10100]	/* MoveIndirectRelPt */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
6 12 0 
SRP1[ ]	/* SetRefPoint1 */
SRP2[ ]	/* SetRefPoint2 */
IP[ ]	/* InterpolatePts */
PUSHB[ ]	/* 1 value pushed */
6 
MDAP[1]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
20 2 
PUSHB[ ]	/* 1 value pushed */
10 
CALL[ ]	/* CallFunction */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
MDRP[11000]	/* MoveDirectRelPt */
ELSE[ ]	/* Else */
MIRP[10100]	/* MoveIndirectRelPt */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
12 
SRP0[ ]	/* SetRefPoint0 */
PUSHB[ ]	/* 2 values pushed */
27 2 
PUSHB[ ]	/* 1 value pushed */
10 
CALL[ ]	/* CallFunction */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
MDRP[11000]	/* MoveDirectRelPt */
ELSE[ ]	/* Else */
MIRP[10100]	/* MoveIndirectRelPt */
EIF[ ]	/* EndIf */
IUP[0]	/* InterpolateUntPts */
IUP[1]	/* InterpolateUntPts */</string>
    </dict>
  </lib>
</glyph>
